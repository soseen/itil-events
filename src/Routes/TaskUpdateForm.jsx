import React, { useState } from 'react';
import { useHistory } from 'react-router';
import { axios } from '../Axios'
import './TaskUpdateForm.scss';

const TaskUpdateForm = ({tasksData, taskToDisplay, eventsData, setTaskUpdatesData, setEventsData, setTasksData}) => {


    const CURRENT_DATE = new Date().toISOString().slice(0, 10);

    let history = useHistory();

    const relatedEvent = eventsData.find(e => e.id === taskToDisplay.event)

    const [taskClosed, setTaskClosed] = useState(false);
    const [validated, setValidated] = useState(true);
    const [newUpdate, setNewUpdate] = useState({
        date: CURRENT_DATE,
        description: '',
        status: 400
    })

    

    const handleChange = (e) => {
        setNewUpdate({
            ...newUpdate, 
            [e.target.name]: e.target.value,
        });
    }

    const validateAndSubmit = async (fieldsToValidate) => {
        if(fieldsToValidate.find(s => s === '') === undefined){
            setValidated(true);

        let promises = [];
    
        if(taskClosed) {
            
            let closedTask = {
                ...taskToDisplay,
                closed: true
            }
            
            promises.push(axios.put(`/api/tasks/${taskToDisplay.id}`, closedTask));
        }

        if(newUpdate.status === 200 || (newUpdate.status === 100 & !relatedEvent.resolved)){
            promises.push(axios.put(`/api/events/${taskToDisplay.event}`, {
                ...relatedEvent,
                resolved: true,
                endDate: CURRENT_DATE
            })
        );
        }
        
        promises.push(axios.post('/api/taskUpdates', {
            ...newUpdate,
            task: taskToDisplay.id
            })
        );

        try {
            await Promise.all(promises);
        } catch (error) {
            console.log(error);
            return; 
        }



        try {
            const [eventsResponse, tasksResponse, taskUpdatesResponse] = await Promise.all([axios.get('/api/events'), axios.get('/api/tasks'), axios.get('/api/taskUpdates')]);
            setEventsData(eventsResponse.data);
            setTasksData(tasksResponse.data);
            setTaskUpdatesData(taskUpdatesResponse.data);
        } catch (error) {
            console.log(error);
        }

        history.goBack();
        
        } else {
            setValidated(false);
        }
    }

    return(
        <div className='task-update-page-container'>
            <div className='new-update-form-container'>
                <div className='new-update-form-header'>
                        <p>New Update</p>
                        <button onClick={() => history.goBack()}>Back</button>
                </div>
                <div className ='new-update-inputs-container'>
                    <div className='new-update-inputs-validation'>
                        <p className={validated ? 'validation-message-hidden' : ''}>Please fill in all the required fields</p>
                    </div>
                    <div className='new-update-inputs'>
                        <div className='new-update-inputs-row'>
                            <label className='new-update-inputs-label input-required'>ID</label>
                            <input disabled type='text' name='id' value='autogenerated' className='new-update-inputs-input'></input>
                        </div>
                        <div className='new-update-inputs-row'>
                            <label className='new-update-inputs-label input-required'>Description</label>
                            <input type='text' name='description' value={newUpdate.description} maxLength={45} className='new-update-inputs-input' onChange={handleChange}></input>
                        </div>
                        {/* <div className='new-update-inputs-row direction-row'>
                            <div className='new-update-inputs-column'>
                                <label className='new-update-inputs-label input-required'>Date</label>
                                <input type='date' name='date' value={newUpdate.date} className='new-update-inputs-input' onChange={handleChange}></input>
                            </div>
                            <div className='new-update-inputs-column'>
                                <label className='new-update-inputs-label input-required'>Status</label>
                                <select name='status' value={newUpdate.status} className={`new-update-inputs-select`} onChange={(e) => setNewUpdate({...newUpdate, [e.target.name]: parseInt(e.target.value)})}>
                                    <option value={400}>Active</option>
                                    <option value={200}>Resolved</option>
                                    <option value={100}>Applying Changes</option>
                                </select>
                            </div>       
                        </div> */}
                            <div className='new-update-inputs-row'>
                                <label className='new-update-inputs-label input-required'>Status</label>
                                <select name='status' value={newUpdate.status} className={`new-update-inputs-select`} onChange={(e) => setNewUpdate({...newUpdate, [e.target.name]: parseInt(e.target.value)})}>
                                    <option value={400}>Active</option>
                                    <option value={200}>Resolved</option>
                                    <option value={100}>Applying Changes</option>
                                </select>
                            </div>       
                        <div className='new-update-inputs-row'>
                                <label className='new-update-inputs-label input-required'>Close task</label>
                                <div className='new-update-inputs-closed-buttons'>
                                    <div className='new-update-inputs-column'>
                                        <button className={taskClosed ? 'task-closed-button' : 'task-closed-button task-closed-button-highlighted'} onClick={() => setTaskClosed(false)}>False</button>
                                    </div>
                                    <div className='new-update-inputs-column'>
                                        <button className={taskClosed ? 'task-closed-button task-closed-button-highlighted' : 'task-closed-button'} onClick={() => setTaskClosed(true)}>True</button>
                                    </div>
                                </div>
                            </div>
                    </div>
                </div>
                <button className='add-update-button' onClick={() => validateAndSubmit([newUpdate.desc])}>Add Update</button>
            </div>

        </div>
    )
}

export default TaskUpdateForm;